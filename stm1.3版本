#include "stm32f10x.h"
#include "stdio.h"
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
volatile uint32_t Tick;
void SysTick_Handler(void) {
    Tick++;
}

void delay_ms(uint32_t ms) {
    uint32_t start = Tick;
    while (Tick - start < ms);
}
u8 phasecw[8] ={0x08,0x0c,0x04,0x06,0x02,0x03,0x01,0x09};// 逆时针
//1000,1100,0100,0110,0010,0011,0001,1001
u8 phaseccw[8]={0x09,0x01,0x03,0x02,0x06,0x04,0x0c,0x08};// 顺时针
//1001,0001,0011,0010,0110,0100,1100,1000

//引脚初始化
void Step_Motor_GPIO_Init(void)
{
     GPIO_InitTypeDef GPIO_InitStructure;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3|GPIO_Pin_4 | GPIO_Pin_5| GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
}
//引脚映射
void SetMotor(unsigned char InputData)//根据传送的数据Inputdata设置脉冲引脚输出
{//根据传送的数据Inputdata设置PB5-PB8引脚输出
    if(InputData&0x01)
    {
        GPIO_SetBits(GPIOA,GPIO_Pin_0);
    }
    else
    {
        GPIO_ResetBits(GPIOA,GPIO_Pin_0);
    }
    if(InputData&0x02)
    {
        GPIO_SetBits(GPIOA,GPIO_Pin_1);
    }
    else
    {
        GPIO_ResetBits(GPIOA,GPIO_Pin_1);

    }
    if(InputData&0x04)
    {
        GPIO_SetBits(GPIOA,GPIO_Pin_2);
    }
    else
    {
        GPIO_ResetBits(GPIOA,GPIO_Pin_2);
    }
    if(InputData&0x08)
    {
        GPIO_SetBits(GPIOA,GPIO_Pin_3);
    }
    else
    {
        GPIO_ResetBits(GPIOA,GPIO_Pin_3);
    }
}
void SetMotor2(unsigned char InputData)//根据传送的数据Inputdata设置脉冲引脚输出
{//根据传送的数据Inputdata设置PB5-PB8引脚输出
    if(InputData&0x01)
    {
        GPIO_SetBits(GPIOA,GPIO_Pin_4);
    }
    else
    {
        GPIO_ResetBits(GPIOA,GPIO_Pin_4);
    }
    if(InputData&0x02)
    {
        GPIO_SetBits(GPIOA,GPIO_Pin_5);
    }
    else
    {
        GPIO_ResetBits(GPIOA,GPIO_Pin_5);

    }
    if(InputData&0x04)
    {
        GPIO_SetBits(GPIOA,GPIO_Pin_6);
    }
    else
    {
        GPIO_ResetBits(GPIOA,GPIO_Pin_6);
    }
    if(InputData&0x08)
    {
        GPIO_SetBits(GPIOA,GPIO_Pin_7);
    }
    else
    {
        GPIO_ResetBits(GPIOA,GPIO_Pin_7);
    }
}
//步距角5.625 360/5.625=64 减速比1/64 
//故64*64个脉冲转一圈
//n圈数 
//position 方向
void motorNcircle(int n,bool position)//n为步进电机转动的圈数，position为正转或者反转
{
    int i,j,k=0;
    for(j=0;j<n;j++)
    {
       for(i=0;i<16*5.625;i++)
       // for(i=0;i<8;i++)
        {
					for(k=0;k<8;k++)
            {
                if(1 == position)
                {
                    SetMotor(phasecw[k]);
                    SetMotor2(phaseccw[k]);

                }
                else
                {
                    SetMotor(phaseccw[k]);
                    SetMotor2(phasecw[k]);
                }
                delay_ms(2);//延时：速度控制，数值越大速度越慢。电流0.65A
            }
        }
    }
}
void motorNcircle3(int n,bool position)//n为步进电机转动的圈数，position为正转或者反转
{
    int i,j,k=0;
    for(j=0;j<n;j++)
    {
       for(i=0;i<16*5.625;i++)
       // for(i=0;i<8;i++)
        {
					for(k=0;k<8;k++)
            {
                if(1 == position)
                {
                    SetMotor(phaseccw[k]);
                    SetMotor2(phaseccw[k]);
                }
                else
                {
                    SetMotor(phasecw[k]);
                    SetMotor2(phasecw[k]);
                }
                delay_ms(2);//延时：速度控制，数值越大速度越慢。电流0.65A
            }
        }
    }
}

int main(void) {
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);// 设置中断优先级分组2
    Step_Motor_GPIO_Init();
    //LED_Init();
    GPIO_ResetBits(GPIOC, GPIO_Pin_13);
    
    //delay_init();
    // 初始化GPIOB时钟
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);

    // 配置PB0为模拟输入模式
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN; // 模拟输入模式
    GPIO_Init(GPIOB, &GPIO_InitStructure);

    // 初始化ADC时钟
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2, ENABLE);

    // 配置ADC1通道
    ADC_InitTypeDef ADC_InitStructure;
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    ADC_InitStructure.ADC_ScanConvMode = DISABLE;
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    ADC_InitStructure.ADC_NbrOfChannel = 1;
    ADC_Init(ADC1, &ADC_InitStructure);
    //ADC2
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    ADC_InitStructure.ADC_ScanConvMode = DISABLE;
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    ADC_InitStructure.ADC_NbrOfChannel = 1;
    ADC_Init(ADC2, &ADC_InitStructure);
    ADC_Cmd(ADC1, ENABLE);
    ADC_Cmd(ADC2, ENABLE);

    // 配置ADC1通道为PB0
    ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 1, ADC_SampleTime_55Cycles5);
    ADC_RegularChannelConfig(ADC2, ADC_Channel_9, 1, ADC_SampleTime_55Cycles5);
    // 初始化串口
    USART_InitTypeDef USART_InitStructure;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA, ENABLE);
    USART_InitStructure.USART_BaudRate = 9600;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Tx;
    USART_Init(USART1, &USART_InitStructure);
    USART_Cmd(USART1, ENABLE);

    // 初始化SysTick定时器
    SysTick_Config(SystemCoreClock / 1000); // 每1ms中断一次

    while (1) {
        // 启动ADC转换
        ADC_SoftwareStartConvCmd(ADC1, ENABLE);
        ADC_SoftwareStartConvCmd(ADC2, ENABLE);
        // 等待转换完成
        while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);
        
        // 读取PB0引脚的模拟输入
        uint16_t signal = ADC_GetConversionValue(ADC1);
      while (ADC_GetFlagStatus(ADC2, ADC_FLAG_EOC) == RESET);

      // 读取PB1引脚的模拟输入
      uint16_t g = ADC_GetConversionValue(ADC2);
        // 发送读取到的模拟值到串口
        //char buffer[32];
        //sprintf(buffer, "%u", signal);
        //for (uint32_t i = 0; i < sizeof(buffer); i++) {
            //USART_SendData(USART1, (uint16_t)buffer[i]);
            //while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
            
        //}
        if(signal<2200 && g<2200){
            motorNcircle(1,true);
            
        }
        else if(signal>2200 && g>2200)
        {
            motorNcircle(1,0);
        
        }
        else if(signal>2200 && g<2200){
            motorNcircle3(1,true);
            
        }
        else{
            motorNcircle3(1,0);
        
        }
        // 延时一段时间，例如100毫秒
        //delay_ms(1000);
      } 
}
////////////////////////////////////////////////////////////////////////////////////	 
//本程序只供学习使用，未经作者许可，不得用于其它任何用途
//ALIENTEK STM32开发板
//串口PB0,PB1初始化		   
//代码由福州大学龙亮制作，未获允许，不得商用
//修改日期:2023.11.7
//版本：1.3
//github:kexinglongwo
//版权所有，盗版必究。
//All rights reserved
//********************************************************************************
//V1.3修改说明 
//支持适应不同频率下的串口波特率设置.
//增加了串口接收命令功能.
//V1.4修改说明
//转动代码变成单轮运转，减少冲量，阻止旋转向前进。
////////////////////////////////////////////////////////////////////////////////// 	 
